/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthLayoutRouteImport } from './routes/auth/_layout'
import { Route as AdminProtectedRouteRouteImport } from './routes/admin/_protectedRoute'
import { Route as AdminProtectedRouteUsersRouteImport } from './routes/admin/_protectedRoute/users'
import { Route as AdminProtectedRouteGamesRouteImport } from './routes/admin/_protectedRoute/games'

const AuthRouteImport = createFileRoute('/auth')()
const AdminRouteImport = createFileRoute('/admin')()

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)
const AdminProtectedRouteRoute = AdminProtectedRouteRouteImport.update({
  id: '/_protectedRoute',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProtectedRouteUsersRoute =
  AdminProtectedRouteUsersRouteImport.update({
    id: '/users',
    path: '/users',
    getParentRoute: () => AdminProtectedRouteRoute,
  } as any)
const AdminProtectedRouteGamesRoute =
  AdminProtectedRouteGamesRouteImport.update({
    id: '/games',
    path: '/games',
    getParentRoute: () => AdminProtectedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminProtectedRouteRouteWithChildren
  '/auth': typeof AuthLayoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/admin/games': typeof AdminProtectedRouteGamesRoute
  '/admin/users': typeof AdminProtectedRouteUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminProtectedRouteRouteWithChildren
  '/auth': typeof AuthLayoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/admin/games': typeof AdminProtectedRouteGamesRoute
  '/admin/users': typeof AdminProtectedRouteUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/_protectedRoute': typeof AdminProtectedRouteRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/auth/_layout': typeof AuthLayoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/admin/_protectedRoute/games': typeof AdminProtectedRouteGamesRoute
  '/admin/_protectedRoute/users': typeof AdminProtectedRouteUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth'
    | '/auth/signup'
    | '/admin/games'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/auth'
    | '/auth/signup'
    | '/admin/games'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/_protectedRoute'
    | '/auth'
    | '/auth/_layout'
    | '/auth/signup'
    | '/admin/_protectedRoute/games'
    | '/admin/_protectedRoute/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/_layout': {
      id: '/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof AuthRoute
    }
    '/admin/_protectedRoute': {
      id: '/admin/_protectedRoute'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminProtectedRouteRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/_protectedRoute/users': {
      id: '/admin/_protectedRoute/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminProtectedRouteUsersRouteImport
      parentRoute: typeof AdminProtectedRouteRoute
    }
    '/admin/_protectedRoute/games': {
      id: '/admin/_protectedRoute/games'
      path: '/games'
      fullPath: '/admin/games'
      preLoaderRoute: typeof AdminProtectedRouteGamesRouteImport
      parentRoute: typeof AdminProtectedRouteRoute
    }
  }
}

interface AdminProtectedRouteRouteChildren {
  AdminProtectedRouteGamesRoute: typeof AdminProtectedRouteGamesRoute
  AdminProtectedRouteUsersRoute: typeof AdminProtectedRouteUsersRoute
}

const AdminProtectedRouteRouteChildren: AdminProtectedRouteRouteChildren = {
  AdminProtectedRouteGamesRoute: AdminProtectedRouteGamesRoute,
  AdminProtectedRouteUsersRoute: AdminProtectedRouteUsersRoute,
}

const AdminProtectedRouteRouteWithChildren =
  AdminProtectedRouteRoute._addFileChildren(AdminProtectedRouteRouteChildren)

interface AdminRouteChildren {
  AdminProtectedRouteRoute: typeof AdminProtectedRouteRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminProtectedRouteRoute: AdminProtectedRouteRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
